# Travis-CI Config
#
# You may use the Deployer to upload packages and builds to external servers.
# See travis/defaults.sh for environment variables to configure.

language: c
sudo: required
dist: trusty

matrix:
    include:
################################
# Deploying Buildbots
################################
        - os: osx
          osx_image: xcode11.5
          env: 
          - DPL_UPLOAD_INSTALLER=1
          - CFLAGS="-march=core2 -mtune=haswell"
          - CXXFLAGS="-march=core2 -mtune=haswell"
          cache:
            directories:
            - $HOME/Library/Caches/Homebrew
            - /usr/local/Homebrew
            - $HOME/homebrew_cache
            - $HOME/.ccache
            - $HOME/srb2_cache
          before_install:
          # Initialize Deployer defaults
          - source ./travis/defaults.sh
          # Unpack homebrew.
          # Unlink current cmake so our installed cmake can overwrite.
          - if [[ -f "$HOME/homebrew_cache/homebrew-cache-Cellar.tar.gz" ]]; then
              brew unlink cmake;
              tar xzf $HOME/homebrew_cache/homebrew-cache-Cellar.tar.gz --directory=/usr/local/Cellar;
              tar xzf $HOME/homebrew_cache/homebrew-cache-opt.tar.gz --directory=/usr/local/opt;
            fi;
          before_cache:
          - brew cleanup
          # Credit https://discourse.brew.sh/t/best-practice-for-homebrew-on-travis-brew-update-is-5min-to-build-time/5215/9
          # Cache only .git files under "/usr/local/Homebrew" so "brew update" does not take 5min every build
          - find /usr/local/Homebrew \! -regex ".+\.git.+" -delete
          - tar czf $HOME/homebrew_cache/homebrew-cache-Cellar.tar.gz --directory=/usr/local/Cellar p7zip cmake ccache sdl2 sdl2_mixer game-music-emu libopenmpt
          - tar czf $HOME/homebrew_cache/homebrew-cache-opt.tar.gz --directory=/usr/local/opt p7zip cmake ccache sdl2 sdl2_mixer game-music-emu libopenmpt
          deploy:
          - provider: releases
            skip_cleanup: true
            api_key: $DPL_GITHUB_TOKEN
            file_glob: true
            file: $TRAVIS_BUILD_DIR/build/deploy/**/*
            draft: true
            on:
              all_branches: true
              condition: '"$__DPL_ENABLED" == "1"'
          - provider: script
            skip_cleanup: true
            # relative to {repo_root}/build
            script: bash ../travis/deployer_ftp.sh
            on:
              all_branches: true
              condition: '"$__DPL_ENABLED" == "1"'
          #Default: macOS 10.13 and Xcode 9.4.1
        - os: windows
          compiler: gcc
          env:
          - DPL_UPLOAD_ASSETS=1
          - DPL_UPLOAD_INSTALLER=1
          - CFLAGS="-march=nocona -mtune=haswell"
          - CXXFLAGS="-march=nocona -mtune=haswell"
          - WFLAGS="-Wno-tautological-compare -Wno-error=implicit-fallthrough -Wno-implicit-fallthrough -Wno-error=format-overflow -Wno-error=format-truncation -Wno-error=stringop-overflow -Wno-error=stringop-truncation"
          - GCC91=1
          - PROGRAM_FILENAME=srb2win
          cache:
            directories:
            - $HOME/AppData/Local/Temp/chocolatey
            - /c/tools/msys64
            - $HOME/.ccache
            - $HOME/srb2_cache
          before_cache:
          # https://unix.stackexchange.com/a/137322/107554
          - $msys2 pacman --sync --clean --noconfirm
          deploy:
          - provider: releases
            skip_cleanup: true
            api_key: $DPL_GITHUB_TOKEN
            file_glob: true
            file: $TRAVIS_BUILD_DIR/build/deploy/**/*
            draft: true
            on:
              all_branches: true
              condition: '"$__DPL_ENABLED" == "1"'
          - provider: script
            skip_cleanup: true
            # relative to {repo_root}/build
            script: bash ../travis/deployer_ftp.sh
            on:
              all_branches: true
              condition: '"$__DPL_ENABLED" == "1"'
          #Windows Server version 1809, mingw-w64-i686-gcc-10.1.0-3
        - os: linux
          addons:
            apt:
              sources:
              - ubuntu-toolchain-r-test
              - sourceline: 'ppa:stjr/srb2'
              packages:
              - libsdl2-mixer-dev
              - libpng-dev
              - libgl1-mesa-dev
              - libgme-dev
              - libopenmpt-dev
              - p7zip-full
              - gcc-8
          compiler: gcc-8
          env:
          - CFLAGS="-march=nocona -mtune=haswell"
          - CXXFLAGS="-march=nocona -mtune=haswell"
          - WFLAGS="-Wno-tautological-compare -Wno-error=implicit-fallthrough -Wno-implicit-fallthrough -Wno-error=format-overflow -Wno-error=format-truncation"
          - GCC81=1
          deploy:
          - provider: releases
            skip_cleanup: true
            api_key: $DPL_GITHUB_TOKEN
            file_glob: true
            file: $TRAVIS_BUILD_DIR/build/deploy/**/*
            draft: true
            on:
              all_branches: true
              condition: '"$__DPL_ENABLED" == "1"'
          - provider: script
            skip_cleanup: true
            # relative to {repo_root}/build
            script: bash ../travis/deployer_ftp.sh
            on:
              all_branches: true
              condition: '"$__DPL_ENABLED" == "1"'
          #gcc-8 (Ubuntu 7.2.0-1ubuntu1~14.04) 8.1.0
################################
# Non-Deploying Buildbots
################################
        - os: linux
          addons:
            apt:
              sources:
              - sourceline: 'ppa:stjr/srb2'
              packages:
              - libsdl2-mixer-dev
              - libpng-dev
              - libgl1-mesa-dev
              - libgme-dev
              - libopenmpt-dev
              - p7zip-full
              - gcc-4.4
          compiler: gcc-4.4
          env: GCC44=1
          #gcc-4.4 (Ubuntu/Linaro 4.4.7-8ubuntu1) 4.4.7
        - os: linux
          addons:
            apt:
              sources:
              - sourceline: 'ppa:stjr/srb2'
              packages:
              - libsdl2-mixer-dev
              - libpng-dev
              - libgl1-mesa-dev
              - libgme-dev
              - libopenmpt-dev
              - p7zip-full
              - gcc-4.6
          compiler: gcc-4.6
          env: GCC46=1
          #gcc-4.6 (Ubuntu/Linaro 4.6.4-6ubuntu2) 4.6.4
        - os: linux
          addons:
            apt:
              sources:
              - sourceline: 'ppa:stjr/srb2'
              packages:
              - libsdl2-mixer-dev
              - libpng-dev
              - libgl1-mesa-dev
              - libgme-dev
              - libopenmpt-dev
              - p7zip-full
              - gcc-4.7
          compiler: gcc-4.7
          env: GCC47=1
          #gcc-4.7
        - os: linux
          compiler: gcc
          env: GCC48=1
          #gcc (Ubuntu 4.8.4-2ubuntu1~14.04) 4.8.4
        - os: linux
          addons:
            apt:
              sources:
              - ubuntu-toolchain-r-test
              - sourceline: 'ppa:stjr/srb2'
              packages:
              - libsdl2-mixer-dev
              - libpng-dev
              - libgl1-mesa-dev
              - libgme-dev
              - libopenmpt-dev
              - p7zip-full
              - gcc-4.8
          compiler: gcc-4.8
          env: GCC48=1
          #gcc-4.8 (Ubuntu 4.8.5-2ubuntu1~14.04.1) 4.8.5
        - os: linux
          addons:
            apt:
              sources:
              - ubuntu-toolchain-r-test
              - sourceline: 'ppa:stjr/srb2'
              packages:
              - libsdl2-mixer-dev
              - libpng-dev
              - libgl1-mesa-dev
              - libgme-dev
              - libopenmpt-dev
              - p7zip-full
              - gcc-7
          compiler: gcc-7
          env: WFLAGS="-Wno-tautological-compare -Wno-error=implicit-fallthrough -Wno-implicit-fallthrough" GCC72=1
          #gcc-7 (Ubuntu 7.2.0-1ubuntu1~14.04) 7.2.0 20170802
        - os: linux
          compiler: clang
          #clang version 3.5.0 (tags/RELEASE_350/final)
        - os: linux
          addons:
            apt:
              sources:
              - llvm-toolchain-precise-3.5
              - sourceline: 'ppa:stjr/srb2'
              packages:
              - libsdl2-mixer-dev
              - libpng-dev
              - libgl1-mesa-dev
              - libgme-dev
              - libopenmpt-dev
              - p7zip-full
              - clang-3.5
          compiler: clang-3.5
          #Ubuntu clang version 3.5.0-4ubuntu2~trusty2 (tags/RELEASE_350/final) (based on LLVM 3.5.0)
        - os: linux
          addons:
            apt:
              sources:
              - llvm-toolchain-precise-3.6
              - ubuntu-toolchain-r-test
              - sourceline: 'ppa:stjr/srb2'
              packages:
              - libsdl2-mixer-dev
              - libpng-dev
              - libgl1-mesa-dev
              - libgme-dev
              - libopenmpt-dev
              - p7zip-full
              - clang-3.6
          compiler: clang-3.6
          #Ubuntu clang version 3.6.2-svn240577-1~exp1 (branches/release_36) (based on LLVM 3.6.2)
        - os: linux
          addons:
            apt:
              sources:
              - llvm-toolchain-precise-3.7
              - ubuntu-toolchain-r-test
              - sourceline: 'ppa:stjr/srb2'
              packages:
              - libsdl2-mixer-dev
              - libpng-dev
              - libgl1-mesa-dev
              - libgme-dev
              - libopenmpt-dev
              - p7zip-full
              - clang-3.7
          compiler: clang-3.7
          #Ubuntu clang version 3.7.1-svn253571-1~exp1 (branches/release_37) (based on LLVM 3.7.1)
        - os: linux
          addons:
            apt:
              sources:
              - llvm-toolchain-precise-3.8
              - ubuntu-toolchain-r-test
              - sourceline: 'ppa:stjr/srb2'
              packages:
              - libsdl2-mixer-dev
              - libpng-dev
              - libgl1-mesa-dev
              - libgme-dev
              - libopenmpt-dev
              - p7zip-full
              - clang-3.8
          compiler: clang-3.8
          #clang version 3.8.1-svn271127-1~exp1 (branches/release_38)
        - os: linux
          addons:
            apt:
              sources:
              - llvm-toolchain-precise-3.9
              - ubuntu-toolchain-r-test
              - sourceline: 'ppa:stjr/srb2'
              packages:
              - libsdl2-mixer-dev
              - libpng-dev
              - libgl1-mesa-dev
              - libgme-dev
              - libopenmpt-dev
              - p7zip-full
              - clang-3.9
          compiler: clang-3.9
          #clang version 3.9.X
#        - os: linux
#          addons:
#            apt:
#              sources:
#              - llvm-toolchain-precise-4.0
#              - ubuntu-toolchain-r-test
#              - sourceline: 'ppa:stjr/srb2'
#              packages:
#              - libsdl2-mixer-dev
#              - libpng-dev
#              - libgl1-mesa-dev
#              - libgme-dev
#              - libopenmpt-dev
#              - p7zip-full
#              - clang-4.0
#          compiler: clang-4.0
#          #clang version 4.0.X
#        - os: linux
#          addons:
#            apt:
#              sources:
#              - llvm-toolchain-precise-5.0
#              - ubuntu-toolchain-r-test
#              - sourceline: 'ppa:stjr/srb2'
#              packages:
#              - libsdl2-mixer-dev
#              - libpng-dev
#              - libgl1-mesa-dev
#              - libgme-dev
#              - libopenmpt-dev
#              - p7zip-full
#              - clang-5.0
#          compiler: clang-5.0
#          #clang version 5.0.X
#        - os: osx
#          osx_image: beta-xcode6.1
#          #Apple LLVM version 6.0 (clang-600.0.54) (based on LLVM 3.5svn)
#        - os: osx
#          osx_image: beta-xcode6.2
#          compiler: gcc
#          #Apple LLVM version 6.0 (clang-600.0.57) (based on LLVM 3.5svn)
##        - os: osx
##          osx_image: beta-xcode6.3
##          #I think xcode.6.3 VM is broken, it does not boot
#        - os: osx
#          osx_image: xcode6.4
#          #Apple LLVM version 6.1.0 (clang-602.0.53) (based on LLVM 3.6.0svn)
#        - os: osx
#          osx_image: xcode7
#          #Apple LLVM version 7.0.0 (clang-700.0.72)
#        - os: osx
#          osx_image: xcode7.1
#          #Apple LLVM version 7.0.0 (clang-700.1.76)
#        - os: osx
#          osx_image: xcode7.2
#          #Apple LLVM version 7.0.2 (clang-700.1.81)
#        - os: osx
#          osx_image: xcode7.3
#          #Apple LLVM version 7.3.0 (clang-703.0.31)
#        - os: osx
#          osx_image: xcode7.3
#          #Apple LLVM version 7.3.0 (clang-703.0.31)
#        - os: osx
#          #Default: macOS 10.13 and Xcode 9.4.1
    allow_failures:
      - compiler: clang-3.5
      - compiler: clang-3.6
      - compiler: clang-3.7
      - compiler: clang-3.8
      - compiler: clang-3.9
      - compiler: clang-4.0
      - compiler: clang-5.0


cache:
  apt: true
  ccache: true
  directories:
  - $HOME/srb2_cache


addons:
  apt:
    sources:
    - sourceline: 'ppa:stjr/srb2'
    packages:
    - libsdl2-mixer-dev
    - libpng-dev
    - libgl1-mesa-dev
    - libgme-dev
    - zlib1g-dev
    - libopenmpt-dev
    - p7zip-full


before_install:
  # Initialize Deployer defaults
  - source ./travis/defaults.sh


install:
  # OS X: Install library dependencies via Homebrew
  #     * `brew install --build-from-source` builds libraries for our CFLAGS, which target core2 CPU
  #     * `sdl2_mixer` requires options from the formula tap https://github.com/mazmazz/homebrew-srb2
  - mkdir -p $HOME/srb2_cache
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      BREW_UPGRADE="bash ./travis/osx_brew_upgrade.sh";
      brew tap mazmazz/srb2;
      brew update;
      $BREW_UPGRADE p7zip; brew link p7zip;
      $BREW_UPGRADE cmake; brew link cmake;
      $BREW_UPGRADE ccache; brew link ccache;
      $BREW_UPGRADE --build-from-source sdl2; brew link sdl2;
      $BREW_UPGRADE --build-from-source mazmazz/srb2/sdl2_mixer --with-flac --with-mpg123; brew link mazmazz/srb2/sdl2_mixer;
      $BREW_UPGRADE --build-from-source mazmazz/srb2/game-music-emu; brew link mazmazz/srb2/game-music-emu;
      $BREW_UPGRADE --build-from-source libopenmpt; brew link libopenmpt;
    fi
  # Windows: Install MSYS2 and build toolchain
  - if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
      source ./travis/windows_install.sh;
    fi


before_script:
  # OLDPWD is root repo folder
  - OLDPWD=$PWD
  - __ASSET_DIRECTORY="$OLDPWD/assets/installer"
  - mkdir -p "$__ASSET_DIRECTORY"
  - cd "$HOME/srb2_cache"

  # Get stat command so we know what the cached archive date is.
  # stat is different for OSX
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      STATCMD="stat -f %m";
    else
      STATCMD="stat -c %y";
    fi

  # Get asset files (required for MD5)
  # See `deployer_defaults.sh` for asset download path
  - IFS=';' read -r -a paths <<< "$ASSET_ARCHIVE_PATHS"
  - >
    for path in "${paths[@]}";
    do
        if [ -f "$(basename $path)" ]; then
          echo "$(basename $path) cache date -- $($STATCMD $(basename $path))";
        fi;
        wget --verbose --server-response -N "$path";
        7z x "$(basename $path)" -o"$__ASSET_DIRECTORY" -aos;
    done

  # Go back to root repo folder
  - cd "$OLDPWD"

  # Prepare CMake asset lists
  - SRB2_ASSET_HASHED=$(echo ${ASSET_FILES_HASHED// /\;})
  - SRB2_ASSET_DOCS=$(echo ${ASSET_FILES_DOCS// /\;})
  - SRB2_ASSET_DIRECTORY="$__ASSET_DIRECTORY"

  # Prepare CMake
  - mkdir build
  - cd build
  - mkdir package
  - export CFLAGS="-Wall -W -Werror $WFLAGS $CFLAGS"
  - export CCACHE_COMPRESS=true
  # enable CCACHE on OSX
  # also fix LIBRARY_PATH to include SDL2
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      export PATH="/usr/local/opt/ccache/bin:$PATH";
      export LIBRARY_PATH="$LIBRARY_PATH:/usr/local/lib";
      __CMAKE_CCACHE="-DSRB2_USE_CCACHE=ON";
    fi;
  - if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
      __CMAKE_GENERATOR="MinGW Makefiles";
      __CMAKE_COMPILER="-DCMAKE_C_COMPILER=gcc -DCMAKE_MAKE_PROGRAM=mingw32-make";
      __CMAKE_CCACHE="-DSRB2_USE_CCACHE=ON";
      __CMAKE_LIBRARIES="-DSRB2_CONFIG_USE_INTERNAL_LIBRARIES=1";
      __CMAKE_ASM="-DSRB2_CONFIG_USEASM=1";
      __MAKE="mingw32-make";
    else
      __CMAKE_GENERATOR="Unix Makefiles";
      __MAKE="make";
    fi;
  - cmake .. -G "$__CMAKE_GENERATOR" ${__CMAKE_COMPILER} ${__CMAKE_CCACHE} -DCMAKE_BUILD_TYPE=RelWithDebInfo ${__CMAKE_LIBRARIES} ${__CMAKE_ASM}
      -DCMAKE_INSTALL_PREFIX=$PWD/bin -DCPACK_PACKAGE_DIRECTORY=$PWD/package
      -DSRB2_ASSET_HASHED="${SRB2_ASSET_HASHED}" -DSRB2_ASSET_DOCS="${SRB2_ASSET_DOCS}"
      -DSRB2_ASSET_DIRECTORY="${SRB2_ASSET_DIRECTORY}"
      -DCPACK_PACKAGE_DESCRIPTION_SUMMARY="${PROGRAM_NAME}"
      -DCPACK_PACKAGE_VENDOR="${PROGRAM_VENDOR}"
      -DSRB2_SDL2_EXE_NAME="${PROGRAM_FILENAME}"

script:
  - ${__MAKE} -k

after_success:
  # Generate packages and installers
  - source ${TRAVIS_BUILD_DIR}/travis/deployer.sh
